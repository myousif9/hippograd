#---- begin snakebids boilerplate ----------------------------------------------

import snakebids
from snakebids import bids
from os.path import join
from itertools import compress
from operator import itemgetter
from glob import glob


configfile: 'config/snakebids.yml'

#writes inputs_config.yml and updates config dict
config.update(
    snakebids.generate_inputs(
        bids_dir=config['bids_dir'],
        pybids_inputs=config['pybids_inputs'],
        derivatives=config['derivatives'],
        participant_label=config['participant_label'],
        exclude_participant_label=config['exclude_participant_label']
    )
)



#this adds constraints to the bids naming
wildcard_constraints:  **snakebids.get_wildcard_constraints(\
    config['pybids_inputs']\
)

#---- end snakebids boilerplate ------------------------------------------------

# handling hippunfold data
# defining variable for hippunfold and checking that end directory is 'hippunfold', if not 'hippunfold' is  added to file path
hippunfold_dir = config['hippunfold_dir'].rstrip('/')
hippunfold_dir = join(hippunfold_dir,'hippunfold') if 'hippunfold' != hippunfold_dir.split('/')[-1] else hippunfold_dir

hippunfold_subjects = [sub.lstrip('sub-') for sub in os.listdir(hippunfold_dir) if 'sub-' in sub]

hippunfold_paths = [glob(join(hippunfold_dir, "sub-{subject}/surf/sub-{subject}_hemi-*_space-T1w_den-0p5mm_label-hipp_midthickness.surf.gii".format(subject=subj, density=config['density'])))[0].replace('hemi-L','hemi-{hemi}').replace('hemi-R','hemi-{hemi}') for subj in hippunfold_subjects]

hippunfold_input_list = [[], []]

for idx, hippopath in enumerate(hippunfold_paths):
    if hippopath != None:
        hippunfold_input_list[0].append(idx), hippunfold_input_list[1].append(hippopath)
    else:
        continue


getter = itemgetter(*hippunfold_input_list[0])
hippunfold_subjects = getter(hippunfold_subjects)
hippunfold_subj_set = set(hippunfold_subjects)

hippunfold_surf_dict = dict(zip(hippunfold_subjects , hippunfold_input_list[1]))

# storing input wildcards, input lists and zip lists in more accessible names
# wildcards
subj_wildcards = config['subj_wildcards']
bold_vol_wildcards = config['input_wildcards']['bold_volume']
bold_surf_wildcards = config['input_wildcards']['bold_surf']
transform_wildcards = config['input_wildcards']['reverse_transform']

# input lists
bold_vol_inlist = config['input_lists']['bold_volume']
bold_surf_inlist = config['input_lists']['bold_surf']
transform_inlist = config['input_lists']['reverse_transform']

# zip lists
bold_vol_ziplist = config['input_zip_lists']['bold_volume']
bold_surf_ziplist = config['input_zip_lists']['bold_surf']

# merging all subjects into unified list retaining only subjects with all required input files

subjects = set(bold_vol_inlist['subject']) & set(bold_surf_inlist['subject']) & set(transform_inlist['subject']) & set(hippunfold_subj_set)

# converting subjects set to list and assigning all input lists similar subject inputs
subjects = list(subjects)
run_input = config['run'][0] if isinstance(config['run'],list) else config['run']

bold_vol_inlist['subject'] = subjects
bold_surf_inlist['subject'] = subjects
transform_inlist['subject'] = subjects

# logic for handling multiple runs, such that the higher number run is always selected
if 'run' in bold_vol_ziplist.keys():
    # parsing subjects
    for sub_idx, subj in enumerate(subjects):
        # finding subject scan name features with boolean
        sub_bool = [ bold_sub == subj for bold_sub in bold_vol_ziplist['subject'] ] 
        if  sum(sub_bool) > 1 :
            
            # making list of indicies corresponding to specific subjects and finding the number of fmri runs
            sub_indicies = list(compress(range(len(bold_vol_ziplist['run'])), sub_bool))
            sub_runs = [bold_vol_ziplist['run'][s_idx] for s_idx in sub_indicies]
            
            # creating boolean lists indicating the the selected max, min or specified number run as False
            if run_input == 'max':
                run_bool = [run != max(sub_runs) for run in sub_runs]
            elif run_input == 'min':
                run_bool = [run != min(sub_runs) for run in sub_runs]
            elif run_input.isnumeric():
                run_bool = [run != run_input for run in sub_runs]
            else:
                raise ValueError('Invalid input given for run selection.')

            # creading a list of indicies correspeonding to the indicies of the runs not selected 
            run_idx = list(compress(sub_indicies, run_bool))[0]

            # deleting the non selected runs from ziplists for bold images
            for param in bold_vol_ziplist:
                del bold_vol_ziplist[param][run_idx]
                del bold_surf_ziplist[param][run_idx]
        else:
            continue

rule all:
    input:
        # target for fmriclean rule
        expand(bids(
            root = 'results',
            datatype = 'func',
            space = 'MNI152NLin2009cAsym',
            desc = 'cleaned',
            suffix = 'bold.nii.gz',
            **bold_vol_wildcards),
            zip,
            **bold_vol_ziplist
            ),

        # target for post hippunfold rules
        expand(bids(
            root = "work",
            datatype = "anat",
            hemi = "{hemi}",
            den = "{density}",
            suffix = "structure.done",
            **subj_wildcards),
            hemi = config['hemi'],
            density =  config['density'],
            **transform_inlist
            ),

        # target for post fmriclean
        expand(bids(
            root = 'results',
            datatype = 'func',
            task = '{task}',
            hemi = '{hemi}',
            space = 'MNI152NLin2009cAsym',
            den = '{density}',
            suffix = 'bold.func.gii',
            **subj_wildcards),
            density=config['density'],
            hemi = config['hemi'],
            task = config['task'],
            **transform_inlist
            ),

        # target for post fmriclean
        expand(bids(
            root = 'results',
            datatype = 'func',
            task = '{task}',
            hemi = '{hemi}',
            space = 'MNI152NLin2009cAsym',
            den = '{density}',
            desc = 'aligned',
            suffix = 'gradients.func.gii',
            **subj_wildcards),
            density=config['density'],
            hemi = config['hemi'],
            task = config['task'],
            **transform_inlist,
            ),
        
        expand(bids(
            root = 'work',
            datatype = 'func',
            task = '{task}',
            hemi = '{hemi}',
            den = '{density}',
            suffix = 'calc_grad.done',
            **subj_wildcards),
            hemi = config['hemi'],
            density =  config['density'],
            task = config['task'],
            **transform_inlist
            ),

        expand(bids(
            root = 'work',
            task = '{task}',
            hemi = '{hemi}',
            den = '{density}',
            suffix = 'hippograd.spec',
            **subj_wildcards),
            hemi = config['hemi'],
            density =  config['density'],
            task = config['task'],
            **transform_inlist
        ),

        expand(bids(
            root = 'results',
            task = '{task}',
            den = '{density}',
            suffix = 'hippograd.spec',
            **subj_wildcards),
            density =  config['density'],
            task = config['task'],
            **transform_inlist
        ),

# adding rules to pipeline
include: 'rules/fmriclean.smk'

include: 'rules/hippunfold_surf_preprocess.smk'

include: 'rules/calculate_gradients.smk'